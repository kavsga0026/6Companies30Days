class Solution {
    int mod=1_000_000_007;
    public int squareFreeSubsets(int[] nums) {
        int n=nums.length;
        int[][] dp=new int[1001][1<<11];
        for(int i=0;i<1001;i++){
            Arrays.fill(dp[i],-1);
        }
        int[] primes={2,3,5,7,11,13,17,19,23,29};
        int[] numProductMask=new int[n];
        for(int i=0;i<n;i++){
            numProductMask[i]=computeproductmask(nums[i],primes);
        }
        return (dfs(0,numProductMask,1,dp)-1)%mod;
    }
    public int dfs(int pos,int[] numProductMask,int mask,int[][] dp){
        if(pos>=numProductMask.length){
            return 1;
        }
        if(dp[pos][mask]!=-1){
            return dp[pos][mask];
        }
        int ans=dfs(pos+1,numProductMask,mask,dp);
        if((mask & numProductMask[pos])==0){
            ans=(ans+dfs(pos+1,numProductMask,mask | numProductMask[pos],dp))%mod;
        }

        return dp[pos][mask]=ans;
    }
    public int computeproductmask(int num,int[] primes){
        int mask=0;
        for(int i=0;i<10;i++){
            int count=0;
            int prime=primes[i];
            while(num%prime==0){
                count++;
                num/=prime;
            }
            if(count==0){
                continue;
            }
            else if(count==1){
                mask=mask | (1<<(i+1));
            }
            else if(count>=2){
                return -1;
            }
        }
        return mask;
    }
    for(int[] edge : edges){
            int src=edge[0];
            int dest=edge[1];
            int wt=edge[2];
            adj.get(src).add(new int[] {dest,wt});
            adj.get(dest).add(new int[] {src,wt});
    }
}
