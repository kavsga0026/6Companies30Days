class Node{
    Node[] links;
    boolean flag;
    public Node(){
        links=new Node[26];
        flag=false;
    }
    public boolean containsKey(char ch){
        return (links[ch-'a']!=null);
    }
    public Node get(char ch){
        return links[ch-'a'];
    }
    public void put(char ch,Node node){
        links[ch-'a']=node;
    }
    public void setEnd(){
        flag=true;
    }
    public boolean isEnd(){
        return flag;
    }
}
class Trie{
    Node root;
    public Trie(){
        root=new Node();
    }
    public void insert(String s){
        Node node=root;
        for(int i=0;i<s.length();i++){
            if(!node.containsKey(s.charAt(i))){
                node.put(s.charAt(i),new Node());
            }
            node=node.get(s.charAt(i));
        }
        node.setEnd();
    }
    public boolean search(String s){
        return searchhelper(s,0,root);
    }
    public boolean searchhelper(String s,int idx,Node node){
        if(s.length()==idx){
            return node.isEnd();
        }
        if(s.charAt(idx)=='.'){
            for(int i=0;i<26;i++){
                if(node.links[i]!=null && searchhelper(s,idx+1,node.links[i])){
                    return true;
                }
            }
            return false;
        }
        else{
            if(!node.containsKey(s.charAt(idx))){
                return false;
            }
            return searchhelper(s,idx+1,node.get(s.charAt(idx)));
        }
    }
    public boolean startsWith(String s){
        Node node=root;
        for(int i=0;i<s.length();i++){
            if(!node.containsKey(s.charAt(i))){
                return false;
            }
            node=node.get(s.charAt(i));
        }
        return true;
    }
}
class WordDictionary {
    Trie trie;
    public WordDictionary() {
        trie=new Trie();
    }
    
    public void addWord(String word) {
        trie.insert(word);
    }
    
    public boolean search(String word) {
        return trie.search(word);
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
