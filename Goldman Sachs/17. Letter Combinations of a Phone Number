class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans=new ArrayList<>();
        int n=digits.length();
        if(digits.isEmpty()){
            return ans;
        }
        HashMap<Character,char[]> hm=new HashMap<>();
        hm.put('2',new char[] {'a','b','c'});
        hm.put('3',new char[] {'d','e','f'});
        hm.put('4',new char[] {'g','h','i'});
        hm.put('5',new char[] {'j','k','l'});
        hm.put('6',new char[] {'m','n','o'});
        hm.put('7',new char[] {'p','q','r','s'});
        hm.put('8',new char[] {'t','u','v'});
        hm.put('9',new char[] {'w','x','y','z'});
        backtrack(ans,digits,0,new StringBuilder(),hm);
        return ans;
    }
    public void backtrack(List<String> ans,String digits,int idx,StringBuilder sb,HashMap<Character,char[]> hm){
        int n=digits.length();
        if(idx==n){
            String s=sb.toString();
            ans.add(s);
            return;
        }
        for(char c : hm.getOrDefault(digits.charAt(idx),new char[] {})){
            sb.append(c);
            backtrack(ans,digits,idx+1,sb,hm);
            sb.deleteCharAt(sb.length()-1);
        }
        return;
    }
}
