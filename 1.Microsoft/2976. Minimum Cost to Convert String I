class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        int n=source.length();
        long[][] dist=new long[26][26];
        final long inf=Long.MAX_VALUE/2;
        for(int i=0;i<26;i++){
            Arrays.fill(dist[i],inf);
        }
        for(int i=0;i<cost.length;i++){
            dist[original[i]-'a'][changed[i]-'a']=(long) Math.min(dist[original[i]-'a'][changed[i]-'a'],cost[i]);
        }
        for(int middle=0;middle<26;middle++){
            for(int i=0;i<26;i++){
                for(int j=0;j<26;j++){
                    dist[i][j]=Math.min(dist[i][j],dist[i][middle]+dist[middle][j]);
                }
            }
        }
        long mincost=0;
        for(int i=0;i<n;i++){
            char c1=source.charAt(i);
            char c2=target.charAt(i);
            if(c1==c2){
                continue;
            }
            if(dist[c1-'a'][c2-'a']==inf){
                return -1;
            }
            mincost+=dist[c1-'a'][c2-'a'];
        }
        return mincost;
    }
}
