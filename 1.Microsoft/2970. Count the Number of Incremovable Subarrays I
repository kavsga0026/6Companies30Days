class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int n=nums.length;
        boolean[] prefix=new boolean[n];
        prefix[0]=true;
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1] && (nums[i-1]<nums[i]);
        }
        boolean[] suffix=new boolean[n];
        suffix[n-1]=true;
        for(int i=n-2;i>=0;i--){
            suffix[i]=suffix[i+1] && (nums[i+1]>nums[i]);
        }
        int count=0;
        for(int fi=0;fi<n;fi++){
            for(int li=fi;li<n;li++){
                boolean leftvalid=true;
                if(fi>0){
                    leftvalid=prefix[fi-1];
                }
                boolean rightvalid=true;
                if(li<n-1){
                    rightvalid=suffix[li+1];
                }
                boolean middlevalid=true;
                if(fi>0 && li<n-1){
                    middlevalid=(nums[fi-1]<nums[li+1]);
                }
                if(leftvalid &&  rightvalid && middlevalid){
                    count++;
                }
            }
        }
        
        return count;
    }
}
